name: 'Build docker image'
description: 'Build and load or push a tagged docker image for stump'

inputs:
  username:
    description: 'Username for docker login'
    required: true
  password:
    description: 'Token for docker login'
    required: true
  load:
    description: 'Set output-type to docker'
    default: 'true'
  push:
    description: 'Set output-type to registry'
    default: 'false'
  tags:
    description: 'List of tags to assigned to the image'
    default: 'nightly'
  platforms:
    description: 'List of platforms to build'
    required: true
  discord-webhook:
    description: 'Discord webhook to send notifications to'
    required: true

runs:
  using: composite
  steps:
    - name: Get commit short sha
      run: echo "GIT_REV=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      shell: bash

    - name: Format tags
      run: |
        echo "TAGS=$(echo ${{ inputs.tags }} | sed -e 's/,/,aaronleopold\/stump:/g' | sed -e 's/^/aaronleopold\/stump:/')" >> $GITHUB_ENV
      shell: bash

    - name: Setup rust
      uses: ./.github/actions/setup-cargo

    - name: Generate Prisma client
      uses: ./.github/actions/setup-prisma

    # TODO: uncomment once cache stuff is resolved...
    # - name: Setup Docker layers cache
    #   uses: actions/cache@v3
    #   with:
    #     path: /tmp/.buildx-cache
    #     key: ${{ runner.os }}-buildx-${{ github.sha }}
    #     restore-keys: |
    #       ${{ runner.os }}-buildx-

    # We only need QEMU when an arm* platform is targeted
    - name: Check QEMU requirement
      id: check-qemu
      run: |
        if [[ ${{ inputs.platforms }} == *"arm"* ]]; then
          echo "SETUP_QEMU=1" >> $GITHUB_OUTPUT
        else
          echo "SETUP_QEMU=0" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      if: ${{ steps.check-qemu.outputs.SETUP_QEMU == '1' }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Run buildx build
      uses: docker/build-push-action@v4
      with:
        context: .
        build-args: |
          "GIT_REV=${{ env.GIT_REV }}"
        file: scripts/release/Dockerfile
        platforms: ${{ inputs.platforms }}
        load: ${{ inputs.load }}
        push: ${{ inputs.push }}
        tags: ${{ env.TAGS }}
        # TODO: uncomment once cache stuff is resolved...
        # cache-from: type=local,src=/tmp/.buildx-cache
        # cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # https://github.com/docker/build-push-action/issues/252
      # TODO: https://github.com/moby/buildkit/issues/1896
    # TODO: uncomment once cache stuff is resolved...
    # - name: Move buildx cache
    #   run: |
    #     rm -rf /tmp/.buildx-cache
    #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    #   shell: bash

    - name: Discord notification
      if: ${{ success() && inputs.push == 'true' }}
      env:
        DISCORD_WEBHOOK: ${{ inputs.discord-webhook }}
      uses: 'Ilshidur/action-discord@0.3.2'
      with:
        args: 'Successfully pushed the following image tags to registry: ${{ env.TAGS }}'
