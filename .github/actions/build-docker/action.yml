name: 'Build docker image'
description: 'Build and load or push a tagged docker image for stump'

inputs:
  username:
    description: 'Username for docker login'
    required: true
  password:
    description: 'Token for docker login'
    required: true
  load:
    description: 'Set output-type to docker'
    default: 'true'
  push:
    description: 'Set output-type to registry'
    default: 'false'
  tags:
    description: 'List of tags to assigned to the image'
    default: 'nightly'
  archs:
    description: 'List of platforms to build'
    required: true
  discord-webhook:
    description: 'Discord webhook to send notifications to'
    required: true

runs:
  using: composite
  steps:
    - name: Get commit short sha
      run: echo "GIT_REV=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      shell: bash

    - name: Format tags
      run: |
        echo "FORMATTED_TAGS=$(echo ${{ inputs.tags }} | sed -e 's/,/ /g')" >> $GITHUB_ENV
        echo "LOCAL_IMAGES=$(echo ${{ inputs.tags }} | sed -e 's/,/,localhost\/stump:/g' | sed -e 's/^/localhost\/stump:/')" >> $GITHUB_ENV
      shell: bash

    - name: Sanity check
      run: |
        echo "TAGS=${{ inputs.tags }}"
        echo "FORMATTED_TAGS=${{ env.FORMATTED_TAGS }}"
        echo "LOCAL_IMAGES=${{ env.LOCAL_IMAGES }}"
        echo "GIT_REV=${{ env.GIT_REV }}"
      shell: bash

    - name: Setup rust
      uses: ./.github/actions/setup-rust
      with:
        # Note: until some sort of local caching is implemented, we don't want to cache dependencies
        # because the network overhead is too high and eats up lots of time
        cache-dependencies: ${{ runner.environment != 'self-hosted' }}

    # We only need QEMU when an arm* platform is targeted
    - name: Check QEMU requirement
      id: check-qemu
      run: |
        if [[ ${{ inputs.archs }} == *"arm"* ]]; then
          echo "SETUP_QEMU=1" >> $GITHUB_OUTPUT
        else
          echo "SETUP_QEMU=0" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      if: ${{ steps.check-qemu.outputs.SETUP_QEMU == '1' }}
      with:
        platforms: linux/arm64

    - name: Install podman and buildah
      if: runner.environment != 'self-hosted'
      run: |
        sudo apt-get update
        sudo apt-get install -y podman buildah
      shell: bash

    - name: Remove existing images
      run: |
        podman rmi ${{ env.LOCAL_IMAGES }} || true
      shell: bash

    - name: Run buildah build
      id: build
      uses: redhat-actions/buildah-build@v2
      with:
        image: stump
        tags: ${{ env.FORMATTED_TAGS }}
        archs: ${{ inputs.archs }}
        build-args: |
          GIT_REV=${{ env.GIT_REV }}
          RUN_PRISMA_GENERATE=false
        containerfiles: |
          ./docker/Dockerfile

    - name: Echo build outputs
      run: |
        echo "${{ toJSON(steps.build.outputs) }}"
      shell: bash

    - name: Push to registry
      id: push
      if: ${{ success() && inputs.push == 'true' }}
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build.outputs.image }}
        tags: ${{ steps.build.outputs.tags }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
        registry: docker.io/aaronleopold

    - name: Echo push outputs
      run: |
        echo "${{ toJSON(steps.push.outputs) }}"
      shell: bash

    - name: Discord notification
      if: ${{ success() && inputs.push == 'true' && inputs.discord-webhook != '' }}
      env:
        DISCORD_WEBHOOK: ${{ inputs.discord-webhook }}
      uses: 'Ilshidur/action-discord@0.3.2'
      with:
        args: 'Successfully pushed the following image tags to registry: ${{ steps.build.outputs.tags }}'
