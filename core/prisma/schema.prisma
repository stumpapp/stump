datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

model User {
  id String @id @default(cuid())

  username             String    @unique
  hashed_password      String // Salted and hashed, NOT plain text
  is_server_owner      Boolean   @default(false)
  avatar_url           String?
  last_login           DateTime?
  created_at           DateTime  @default(now())
  deleted_at           DateTime?
  is_locked            Boolean   @default(false) // Locked users cannot login
  max_sessions_allowed Int? // null = unlimited
  permissions          String? // comma separated list, e.g. "book_club:create, file:upload, file:download"

  reviews                   Review[]
  active_reading_sessions   ActiveReadingSession[]
  finished_reading_sessions FinishedReadingSession[]
  reading_lists             ReadingList[]

  book_club_memberships BookClubMember[]
  book_club_invitations BookClubInvitation[]

  age_restriction            AgeRestriction?
  libraries_hidden_from_user Library[]

  // Waiting on https://github.com/Brendonovich/prisma-client-rust/issues/44, then making it mandatory
  user_preferences_id String?          @unique
  user_preferences    UserPreferences? @relation(fields: [user_preferences_id], references: [id], onDelete: Cascade)

  login_activity          UserLoginActivity[]
  bookmarks               Bookmark[]
  media_annotations       MediaAnnotation[]
  sessions                Session[]
  library_visits          LastLibraryVisit[]
  smart_lists             SmartList[]
  smart_list_access_rules SmartListAccessRule[]
  email_usage_history     EmailerSendRecord[]

  @@map("users")
}

model UserLoginActivity {
  id                        String   @id @default(uuid())
  ip_address                String // TODO: this is not being collected properly
  user_agent                String // Basic user agent string
  authentication_successful Boolean
  timestamp                 DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_login_activity")
}

model Session {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  expires_at DateTime
  data       Bytes // User information (user and user preferences)

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("sessions")
}

model AgeRestriction {
  age               Int // The minimum age for the user
  restrict_on_unset Boolean @default(false) // Media without an age rating is forbidden

  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("age_restrictions")
}

model Library {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  path        String   @unique
  status      String   @default("READY") // UNKNOWN, READY, UNSUPPORTED, ERROR, MISSING
  updated_at  DateTime @updatedAt
  created_at  DateTime @default(now())
  emoji       String?

  series Series[]

  library_options    LibraryOptions @relation(fields: [library_options_id], references: [id])
  library_options_id String         @unique

  tags              Tag[]
  hidden_from_users User[]

  job_schedule_config    JobScheduleConfig? @relation(fields: [job_schedule_config_id], references: [id])
  job_schedule_config_id String?
  user_visits            LastLibraryVisit[]

  @@map("libraries")
}

model LibraryOptions {
  id                      String  @id @default(uuid())
  convert_rar_to_zip      Boolean @default(false)
  hard_delete_conversions Boolean @default(false)
  library_pattern         String  @default("SERIES_BASED") // SERIES_BASED or COLLECTION_BASED
  thumbnail_config        Bytes? // { size_factor: "...", format: "...", quality: ... }

  library_id String?
  library    Library?

  @@map("library_options")
}

model LastLibraryVisit {
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  library_id String
  library    Library @relation(fields: [library_id], references: [id], onDelete: Cascade)

  timestamp DateTime @default(now())

  @@unique([user_id, library_id])
  @@map("last_library_visits")
}

model Series {
  id          String   @id @default(uuid())
  name        String
  description String?
  updated_at  DateTime @updatedAt
  created_at  DateTime @default(now())
  path        String
  status      String   @default("READY") // UNKNOWN, READY, UNSUPPORTED, ERROR, MISSING

  metadata SeriesMetadata?

  library_id String?
  library    Library? @relation(fields: [library_id], references: [id], onDelete: Cascade)

  media Media[]
  tags  Tag[]

  @@map("series")
}

// TODO: determine what is optional and what is safe to make required
// This is primarily derived from a series.json file. Refer to:
// https://github.com/mylar3/mylar3/wiki/series.json-schema-%28version-1.0.1%29
model SeriesMetadata {
  meta_type  String // ex: "comicSeries"
  title      String?
  summary    String?
  publisher  String?
  imprint    String?
  comicid    Int? // ComicVine id
  volume     Int?
  booktype   String? // ex: Print, OneShot, TPB or GN
  age_rating Int?
  status     String? // ex: Continuing, Ended

  series_id String @id
  series    Series @relation(fields: [series_id], references: [id], onDelete: Cascade)

  @@map("series_metadata")
}

model Media {
  id String @id @default(uuid())

  name        String // derived from filename
  size        BigInt // in bytes
  extension   String
  pages       Int
  updated_at  DateTime  @updatedAt
  created_at  DateTime  @default(now())
  modified_at DateTime?
  hash        String? // This is **not** an integrity check(sum), and is not used to verify the file contents.
  path        String
  status      String    @default("READY") // UNKNOWN, READY, UNSUPPORTED, ERROR, MISSING

  metadata  MediaMetadata?
  series    Series?        @relation(fields: [series_id], references: [id], onDelete: Cascade)
  series_id String?

  active_user_reading_sessions   ActiveReadingSession[]
  finished_user_reading_sessions FinishedReadingSession[]
  tags                           Tag[]
  reading_list_items             ReadingListItem[]
  annotations                    MediaAnnotation[]
  reviews                        Review[]
  book_club_suggestions          BookClubBookSuggestion[]
  book_club_books                BookClubBook[]
  book_club_member_favorite_book BookClubMemberFavoriteBook[]
  bookmarks                      Bookmark[]

  @@map("media")
}

// TODO: determine what is optional and what is safe to make required
model MediaMetadata {
  // TODO(prisma 0.7.0): Nested create
  id String @id @default(cuid())

  title      String?
  series     String?
  number     Float?
  volume     Int?
  summary    String?
  notes      String?
  age_rating Int?
  year       Int?
  month      Int?
  day        Int?

  // *** This entire group will store as a String, but they are all String[] ***
  genre         String?
  writers       String?
  pencillers    String?
  inkers        String?
  colorists     String?
  letterers     String?
  cover_artists String?
  editors       String?
  // *** End of group ***

  publisher String?

  // *** This entire group will store as a String, but they are all String[] ***
  links      String?
  characters String?
  teams      String?
  // *** End of group ***

  page_count Int?
  page_dimensions PageDimensions?

  media    Media?  @relation(fields: [media_id], references: [id], onDelete: Cascade)
  media_id String? @unique

  @@map("media_metadata")
}

model PageDimensions {
  id String @id @default(cuid())
  dimensions String
  metadata MediaMetadata @relation(fields: [metadata_id], references: [id], onDelete: Cascade)
  metadata_id String @unique

  @@map("page_dimensions")
}

model Review {
  id String @id @default(cuid())

  rating     Int
  content    String?
  is_private Boolean @default(false)

  media_id String
  media    Media  @relation(fields: [media_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, media_id])
  @@map("reviews")
}

model FinishedReadingSession {
  id String @id @default(cuid())

  started_at   DateTime
  completed_at DateTime @default(now())

  // TODO: Support reading duration in the future

  media_id String
  media    Media  @relation(fields: [media_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("finished_reading_sessions")
}

model ActiveReadingSession {
  id String @id @default(uuid())

  // TODO: Support reading duration in the future

  page                 Int?
  percentage_completed Float? // 0.0 - 1.0
  epubcfi              String?

  started_at DateTime @default(now())
  updated_at DateTime @updatedAt

  media_id String
  media    Media  @relation(fields: [media_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, media_id])
  @@map("reading_sessions")
}

model Bookmark {
  id String @id @default(uuid())

  preview_content String?
  epubcfi         String?
  page            Int?

  media_id String
  media    Media  @relation(fields: [media_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, media_id, epubcfi, page])
  @@map("bookmarks")
}

model MediaAnnotation {
  id                 String  @id @default(uuid())
  highlighted_text   String?
  epubcfi            String?
  page               Int?
  page_coordinates_x Float? // relative to where the annotation was made on the page
  page_coordinates_y Float? // relative to where the annotation was made on the page
  notes              String?

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  media_id String
  media    Media  @relation(fields: [media_id], references: [id], onDelete: Cascade)

  @@map("media_annotations")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique // ex: "Action"

  media     Media[]
  series    Series[]
  libraries Library[]

  @@map("tags")
}

model BookClub {
  id               String   @id @default(cuid())
  name             String   @unique
  description      String?
  emoji            String?
  is_private       Boolean  @default(false)
  member_role_spec Bytes?
  created_at       DateTime @default(now())

  members     BookClubMember[]
  schedule    BookClubSchedule?
  invitations BookClubInvitation[]

  @@map("book_clubs")
}

model BookClubInvitation {
  id String @id @default(cuid())

  role Int @default(0) // 0 - member, 1 - moderator, 2 - admin, 3 - creator

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  book_club_id String
  book_club    BookClub @relation(fields: [book_club_id], references: [id], onDelete: Cascade)

  @@unique([user_id, book_club_id])
  @@map("book_club_invitations")
}

model BookClubMember {
  id String @id @default(cuid())

  display_name       String? // If omitted, will default to the user's username
  is_creator         Boolean @default(false)
  hide_progress      Boolean
  private_membership Boolean @default(false)

  role Int // 0 - member, 1 - moderator, 2 - admin, 3 - creator

  user_id                   String
  user                      User                         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book_club_id              String
  book_club                 BookClub                     @relation(fields: [book_club_id], references: [id], onDelete: Cascade)
  discussion_messages       BookClubChatMessage[]
  liked_discussion_messages BookClubChatMessageLike[]
  book_suggestions          BookClubBookSuggestion[]
  liked_book_suggestions    BookClubBookSuggestionLike[]
  favorite_book             BookClubMemberFavoriteBook?

  @@unique([user_id, book_club_id])
  @@map("book_club_members")
}

model BookClubMemberFavoriteBook {
  id String @id @default(cuid())

  title  String?
  author String?
  url    String?
  notes  String?

  member_id String         @unique
  member    BookClubMember @relation(fields: [member_id], references: [id], onDelete: Cascade)
  book_id   String?
  book      Media?         @relation(fields: [book_id], references: [id], onDelete: Cascade)

  @@map("book_club_member_favorite_books")
}

model BookClubSchedule {
  default_interval_days Int? @default(30) // in days
  // auto_start_chat_board Boolean @default(false)

  books BookClubBook[]

  book_club_id String   @id
  book_club    BookClub @relation(fields: [book_club_id], references: [id], onDelete: Cascade)

  @@map("book_club_schedules")
}

model BookClubBook {
  id String @id @default(cuid())

  start_at                 DateTime
  end_at                   DateTime
  discussion_duration_days Int?     @default(1) // in days

  // The below group should only be set if the book is not already in the library
  title  String?
  author String?
  url    String?

  book_entity_id String?
  book_entity    Media?  @relation(fields: [book_entity_id], references: [id], onDelete: Cascade)

  book_club_schedule_book_club_id String?
  book_club_schedule              BookClubSchedule? @relation(fields: [book_club_schedule_book_club_id], references: [book_club_id], onDelete: Cascade)

  chat_board BookClubChatBoard?

  @@map("book_club_books")
}

model BookClubBookSuggestion {
  id String @id @default(cuid())

  title  String?
  author String?
  url    String?
  notes  String?

  suggested_by_id String
  suggested_by    BookClubMember @relation(fields: [suggested_by_id], references: [id], onDelete: Cascade)
  book_id         String?
  book            Media?         @relation(fields: [book_id], references: [id], onDelete: Cascade)

  likes BookClubBookSuggestionLike[]

  @@map("book_club_book_suggestions")
}

model BookClubBookSuggestionLike {
  timestamp DateTime @default(now())

  liked_by_id   String
  liked_by      BookClubMember         @relation(fields: [liked_by_id], references: [id], onDelete: Cascade)
  suggestion_id String
  suggestion    BookClubBookSuggestion @relation(fields: [suggestion_id], references: [id], onDelete: Cascade)

  @@unique([liked_by_id, suggestion_id])
  @@map("book_club_book_suggestion_likes")
}

model BookClubChatBoard {
  id String @id @default(cuid())

  messages BookClubChatMessage[]

  book_club_book_id String       @unique
  book_club_book    BookClubBook @relation(fields: [book_club_book_id], references: [id], onDelete: Cascade)

  @@map("book_club_chat_boards")
}

model BookClubChatMessage {
  id             String   @id @default(cuid())
  content        String
  timestamp      DateTime @default(now())
  is_top_message Boolean  @default(true)

  parent_message_id String?
  // TODO: cascade delete? Not sure... I don't necessarily want to delete the children if the parent is deleted. Maybe soft delete when a user 'deletes' a message? Then just hide content from deleted messages...
  parent_message    BookClubChatMessage? @relation("ThreadMessage", fields: [parent_message_id], references: [id])

  chat_board    BookClubChatBoard @relation(fields: [chat_board_id], references: [id], onDelete: Cascade)
  chat_board_id String

  member    BookClubMember? @relation(fields: [member_id], references: [id], onDelete: Cascade)
  member_id String?

  likes          BookClubChatMessageLike[]
  child_messages BookClubChatMessage[]     @relation("ThreadMessage")

  @@map("book_club_chat_messages")
}

model BookClubChatMessageLike {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  liked_by    BookClubMember @relation(fields: [liked_by_id], references: [id], onDelete: Cascade)
  liked_by_id String

  message    BookClubChatMessage @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id String

  @@map("book_club_chat_message_likes")
}

model ReadingListRBAC {
  role Int // 0: excluded, 1: reader, 2: collaborator, 3: creator

  user_id         String
  reading_list_id String
  reading_list    ReadingList? @relation(fields: [reading_list_id], references: [id])

  @@unique([user_id, reading_list_id])
  @@map("reading_list_rules")
}

model ReadingListItem {
  // The order in which the media should be displayed in the reading list. ex: 1
  // This will be ignored if the reading list ordering is not set to "MANUAL"
  display_order Int

  media_id String
  media    Media? @relation(fields: [media_id], references: [id])

  reading_list    ReadingList @relation(fields: [reading_list_id], references: [id])
  reading_list_id String

  @@unique([media_id, reading_list_id])
  @@map("reading_list_items")
}

model ReadingList {
  id          String   @id @default(cuid())
  // The name of the reading list. ex: "Summer Reading"
  name        String
  // The description of the reading list. ex: "The best reading list ever"
  description String?
  // The date in which the reading list was last updated. ex: "2022-04-20 04:20:69"
  updated_at  DateTime @updatedAt
  // The visibility of the reading list. ex: "PUBLIC", "PRIVATE" or "SHARED"
  visibility  String   @default("PRIVATE")
  // The ordering of the reading list. This will either be "MANUAL" or a specific
  // field on the media. ex: 'name', 'created_at', 'pushlish_date', etc.
  ordering    String   @default("MANUAL")

  // The access control rules for this reading list
  access_control   ReadingListRBAC[]
  // The items in the reading list.
  items            ReadingListItem[]
  // The user who created the reading list.
  creating_user    User              @relation(fields: [creating_user_id], references: [id], onDelete: Cascade)
  // The id of the user who created the reading list.
  creating_user_id String

  // A user can only have one reading list with the same name
  @@unique([creating_user_id, name])
  @@map("reading_lists")
}

model SmartListAccessRule {
  role Int // 1: reader (read), 2: collaborator (read, edit), 3: co-creator (read, edit, delete)

  user_id       String
  user          User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  smart_list_id String
  smart_list    SmartList? @relation(fields: [smart_list_id], references: [id], onDelete: Cascade)

  @@unique([user_id, smart_list_id])
  @@map("smart_list_access_rules")
}

model SmartList {
  id String @id @default(cuid())

  name             String
  description      String?
  filters          Bytes
  joiner           String  @default("AND") // AND or OR
  default_grouping String  @default("BY_BOOKS") // BY_BOOKS, BY_SERIES, BY_LIBRARY
  visibility       String  @default("PRIVATE") // PRIVATE, SHARED, PUBLIC

  creator_id String
  creator    User   @relation(fields: [creator_id], references: [id], onDelete: Cascade)

  saved_views  SmartListView[]
  access_rules SmartListAccessRule[]

  @@unique([creator_id, name])
  @@map("smart_lists")
}

model SmartListView {
  name String

  list_id String
  list    SmartList @relation(fields: [list_id], references: [id], onDelete: Cascade)

  data Bytes

  @@unique([list_id, name])
  @@map("smart_list_views")
}

model Collection {
  id          String   @id @default(cuid())
  // The name of the collection. ex: "Spider-Man Comics"
  name        String
  // The description of the collection. ex: "All the Spider-Man arcs together in one place"
  description String?
  // The date in which the collection was last updated. ex: "2022-04-20 04:20:69"
  updated_at  DateTime @updatedAt

  @@map("collections")
}

model Job {
  id           String    @id
  // The name of the job, e.g. Library Scan
  name         String
  // The extra description
  description  String?
  // The status of the job (i.e. QUEUED, RUNNING, COMPLETED, FAILED, CANCELLED).
  status       String    @default("QUEUED")
  // The state of the job. This is primarily stored in order to support pausing/resuming
  // jobs, as it will hold the state of the job at the time it was paused.
  save_state   Bytes?
  // The finalized output data of the job
  output_data  Bytes?
  // The time (in milliseconds) to complete the job
  ms_elapsed   BigInt    @default(0)
  // The datetime stamp of when the job was created
  created_at   DateTime  @default(now())
  // The datetime stamp of when the job completed
  completed_at DateTime?

  logs Log[]

  @@map("jobs")
}

model Log {
  id Int @id @default(autoincrement())

  level     String   @default("INFO") //  "ERROR", "WARN", "INFO", "DEBUG"
  message   String
  context   String?
  timestamp DateTime @default(now())

  job    Job?    @relation(fields: [job_id], references: [id], onDelete: Cascade)
  job_id String?

  @@map("logs")
}

model UserPreferences {
  id String @id @default(cuid())

  preferred_layout_mode String @default("GRID")
  locale                String @default("en")
  app_theme             String @default("LIGHT")

  primary_navigation_mode String  @default("SIDEBAR")
  layout_max_width_px     Int?    @default(1280)
  show_query_indicator    Boolean @default(false)
  enable_live_refetch     Boolean @default(false)
  enable_discord_presence Boolean @default(false)
  enable_compact_display  Boolean @default(false)

  enable_double_sidebar          Boolean @default(true)
  enable_replace_primary_sidebar Boolean @default(false)
  enable_hide_scrollbar          Boolean @default(false)
  prefer_accent_color            Boolean @default(true)
  show_thumbnails_in_headers     Boolean @default(false)

  navigation_arrangement Bytes?
  home_arrangement       Bytes?

  user    User?
  user_id String? @unique

  @@map("user_preferences")
}

model JobScheduleConfig {
  id            String @id @default(cuid())
  // The interval (in seconds) in which to run the scheduled configuration
  interval_secs Int    @default(86400)

  // The libraries to exclude from scheduled scans, if any
  excluded_libraries Library[]
  // The associated server preferences. There will only ever be one instance of ServerConfig in the database.
  server_config      ServerConfig?

  @@map("job_schedule_configs")
}

model Notifier {
  id Int @id @default(autoincrement())

  type   String // DISCORD | TELEGRAM
  config Bytes // There will be too many variants to support concrete type(s)

  @@map("notifiers")
}

model RegisteredEmailDevice {
  id Int @id @default(autoincrement())

  name      String  @unique
  email     String
  forbidden Boolean @default(false)

  @@map("registered_email_devices")
}

model EmailerSendRecord {
  id Int @id @default(autoincrement())

  emailer_id Int
  emailer    Emailer @relation(fields: [emailer_id], references: [id], onDelete: Cascade)

  recipient_email String
  attachment_meta Bytes? // { name: "...", size: ... }
  sent_at         DateTime @default(now())

  sent_by_user_id String?
  sent_by         User?   @relation(fields: [sent_by_user_id], references: [id], onDelete: Cascade)

  @@map("emailer_send_records")
}

model Emailer {
  id Int @id @default(autoincrement())

  name       String  @unique
  is_primary Boolean @default(false)

  sender_email              String
  sender_display_name       String
  username                  String
  encrypted_password        String
  smtp_host                 String
  smtp_port                 Int
  tls_enabled               Boolean @default(false)
  max_attachment_size_bytes Int? // null = unlimited
  max_num_attachments       Int? // null = unlimited

  last_used_at DateTime?

  send_history EmailerSendRecord[]

  @@map("emailers")
}

// An external invitation sent to a provided email for the user to join the server
model ServerInvitation {
  id String @id @default(cuid())

  secret              String // The secret token used to verify the invitation
  email               String?
  granted_permissions String? // comma separated list, e.g. "book_club:create, file:upload, file:download"
  created_at          DateTime @default(now())
  expires_at          DateTime

  @@map("server_invitations")
}

model ServerConfig {
  id String @id @default(cuid())

  public_url String? // The public URL of the server, if any

  initial_wal_setup_complete Boolean @default(false) // Whether the initial WAL setup has been completed
  // TODO: For obvious reasons, this is severely insecure lol i.e. don't store an encryption key in the database...
  // However, I don't have a better solution at the moment. This, at best, provides a small barrier to entry I guess 
  // for bad actors. I am not overly knowledgeable in cryptography, so I'm not sure what the best solution is here.
  encryption_key             String? // The encryption key used to encrypt sensitive data

  // TODO: make this an array, so we can support multiple job types and not assume it will only ever be scheduled scan
  // The schedule configuration. If not set, no scheduled scans will be run.
  job_schedule_config    JobScheduleConfig? @relation(fields: [job_schedule_config_id], references: [id])
  job_schedule_config_id String?            @unique

  @@map("server_config")
}
