datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

// https://github.com/prisma/prisma/issues/2219
// CHORE: once/if above is resolved, use enums
// enum UserRole {
//   Owner,
//   Member,
// }
// enum FileStatus {
//     Unknown,
//     Error,
//     Ready,
//     Unsupported,
//     Outdated,
//     Missing,
// }
// enum LogLevel {
//     Error,
//     Warn,
//     Info,
//     Debug,
// }

model User {
  id              String         @id @default(cuid())
  // The username of the user. E.g. "oromei"
  username        String         @unique
  // The password of the user. This will a hash - not the actual password.
  hashed_password String
  // The role of the user. Defaults to "MEMBER".
  role            String         @default("MEMBER")
  // The media the user currently has progress on.
  // TODO: don't love this name but wanted to emphasize plural. I could do something like
  // `currentlyReading` but that wouldn't match the relation in the Media model. UGH. Naming
  // is so hard lol.
  read_progresses ReadProgress[]

  reading_lists ReadingList[]

  // shared_reading_lists ReadingListAccess[]

  // Waiting on https://github.com/Brendonovich/prisma-client-rust/issues/44, then making it mandatory
  user_preferences_id String?          @unique
  user_preferences    UserPreferences? @relation(fields: [user_preferences_id], references: [id], onDelete: Cascade)

  @@map("users")
}

// TODO: access control for individual libraries. E.g. a managed user account that may only
// access libraries a, b and c.
model Library {
  id          String   @id @default(uuid())
  // The name of the library. ex: "Marvel Comics"
  name        String   @unique
  // The description of the library. ex: "The best library ever"
  description String?
  // The location of the library in the fs. ex: "/home/user/media/comics/marvel"
  path        String   @unique
  // The status of the series since last scan or access
  status      String   @default("READY")
  // The date in which the library was last updated. This is usually after a scan. ex: "2022-04-20 04:20:69"
  updated_at  DateTime @updatedAt
  // The series in the library
  series      Series[]

  library_options    LibraryOptions @relation(fields: [library_options_id], references: [id])
  library_options_id String         @unique

  tags Tag[]

  @@map("libraries")
}

model LibraryOptions {
  id                      String  @id @default(uuid())
  // Flag indicating whether or not to attempt to convert rar files to zip on scans.
  convert_rar_to_zip      Boolean @default(false)
  // Flag indicating whether or not to *hard* delete rar files that were sucessfully converted to zip.
  // Hard delete **will not be recoverable**. When false, converted files will be moved to the systems native
  // trash location, or a custom location when running in Docker (which will clear on an interval).
  hard_delete_conversions Boolean @default(false)
  // Flag indicating whether or not to create WEBP thumbnails for scanned media.
  create_webp_thumbnails  Boolean @default(false)
  // The pattern which this library follows. Used primarily during scanning, affects how Stump
  // will define its series. SERIES_BASED and COLLECTION_BASED are the only
  // two valid options. Default is SERIES_BASED.
  library_pattern         String  @default("SERIES_BASED")

  // The ID of the library which these options belong to.
  library_id String?
  library    Library?

  @@map("library_options")
}

model Series {
  id          String   @id @default(uuid())
  // The title of the series. This is generated from a fs scan, and will be the directory name.
  name        String
  // The description of the series. ex: "The best series ever"
  description String?
  // The date in which the series was last updated in the FS. ex: "2020-01-01"
  updated_at  DateTime @updatedAt
  // The url of the series. ex: "/home/user/media/comics/The Amazing Spider-Man"
  path        String
  // The status of the series since last scan or access
  status      String   @default("READY")
  // The id of the library this series belongs to.
  library_id  String?
  // The library this series belongs to.
  library     Library? @relation(fields: [library_id], references: [id], onDelete: Cascade)
  // The media files in the series.
  media       Media[]

  tags Tag[]

  @@map("series")
}

model Media {
  id              String         @id @default(uuid())
  // The name of the media. ex: "The Amazing Spider-Man (2018) #69"
  name            String
  // The description of the media. ex: "Spidey and his superspy sister, Teresa Parker, dig to uncover THE CHAMELEON CONSPIRACY."
  description     String?
  // The size of the media in bytes.
  size            Int
  // The file extension of the media. ex: "cbz"
  extension       String
  // The number of pages in the media. ex: "69"
  pages           Int
  // The date in which the media was last updated. ex: "2022-04-20 04:20:69"
  updated_at      DateTime       @updatedAt
  // Whether or not the media is downloaded to the client. ex: true
  downloaded      Boolean        @default(false)
  // The checksum hash of the file contents. Used to find multuple instances of a file in the database
  checksum        String?
  // The path of the media. ex: "/home/user/media/comics/The Amazing Spider-Man (2018) #69.cbz"
  path            String
  // The status of the series since last scan or access
  status          String         @default("READY")
  // The series this media belongs to.
  series          Series?        @relation(fields: [series_id], references: [id], onDelete: Cascade)
  // The id of the series this media belongs to.
  series_id       String?
  // The read progresses of the media
  read_progresses ReadProgress[] // TODO: don't love this name but wanted to emphasize plural
  // The user assigned tags for the media. ex: ["Spider-Man", "Marvel"]
  tags            Tag[]

  // readingList   ReadingList? @relation(fields: [readingListId], references: [id])
  // readingListId String?
  reading_list   ReadingList? @relation(fields: [reading_list_id], references: [id])
  reading_list_id String?

  @@map("media")
}

model Tag {
  id        String    @id @default(cuid())
  // The name of the tag. ex: "Action"
  name      String    @unique
  // media which have this tag associated
  media     Media[]
  // series which have this tag associated
  series    Series[]
  // libraries which have this tag associated
  libraries Library[]

  @@map("tags")
}

// TODO: A user is the owning entity for reading lists and may share reading lists with other users
model ReadingList {
  id          String   @id @default(cuid())
  // The name of the reading list. ex: "Summer Reading"
  name        String
  // The description of the reading list. ex: "The best reading list ever"
  description String?
  // The date in which the reading list was last updated. ex: "2022-04-20 04:20:69"
  updated_at  DateTime @updatedAt
  // The media in the reading list.
  media       Media[]

  creating_user    User   @relation(fields: [creating_user_id], references: [id], onDelete: Cascade)
  creating_user_id String

  // access_information ReadingListAccess[]

  // A user can only have one reading list with the same name
  @@unique([creating_user_id, name])
  @@map("reading_lists")
}

// Who may access a reading list created by a user
// model ReadingListAccess {
// id String @id @default(cuid())

// The user who may access the reading list
// user    User   @relation(fields: [user_id], references: [id])
// user_id String

// The reading list that may be accessed
// reading_list    ReadingList @relation(fields: [reading_list_id], references: [id])
// reading_list_id String

// @@unique([user_id, reading_list_id])
// @@map("reading_list_access")
// }

// TODO: A user is the owning entity for collections and may share collections with other users
model Collection {
  id          String   @id @default(cuid())
  // The name of the collection. ex: "Spider-Man Comics"
  name        String
  // The description of the collection. ex: "All the Spider-Man arcs together in one place"
  description String?
  // The date in which the collection was last updated. ex: "2022-04-20 04:20:69"
  updated_at  DateTime @updatedAt
  // The series in the collection.
  // series       Series[]

  @@map("collections")
}

model ReadProgress {
  id   String @id @default(uuid())
  // The page number the user is currently reading. ex: "69". This will be -1
  // for epubs (maybe)
  page Int

  epubcfi String?

  media_id String
  media    Media  @relation(fields: [media_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // literally cant stand this name lol read_progresses
  @@unique([user_id, media_id])
  @@map("read_progresses")
}

model Job {
  id                   String   @id
  // The kind of log, e.g. LibraryScan
  kind                 String
  // The extra details of the job, e.g. "/Users/oromei/Documents/Stump/MainLibrary"
  details              String?
  // The status of the job (i.e. RUNNING, COMPLETED, FAILED, CANCELLED).
  status               String   @default("RUNNING")
  // The total number of tasks
  task_count           Int      @default(1)
  // The total number of tasks completed (i.e. without error/failure)
  completed_task_count Int      @default(0)
  // The time (in milliseconds) to complete the job
  // TODO: I might have to change this. Initial lookup shows the max integer value for 
  // sqlite is LARGE (9223372036854775807) which is 106751991167.3 days lol BUT should
  // do some testing...
  ms_elapsed           BigInt   @default(0)
  // The datetime stamp of when the job completed
  completed_at         DateTime @default(now())

  logs Log[]

  @@map("jobs")
}

model Log {
  id         String   @id @default(uuid())
  // The level of the log. i.e: "ERROR", "WARN", "INFO", "DEBUG"
  level      String   @default("INFO")
  // The message of the log.
  message    String
  // The datetime in which the log was created. ex: "2022-04-20 04:20:69"
  created_at DateTime @default(now())

  job    Job?    @relation(fields: [job_id], references: [id], onDelete: Cascade)
  job_id String?

  @@map("logs")
}

// TODO: I think I want to remove the view modes from database persisted preferences.
// Instead, I'll have a sessionStorage/localStorage store just for those, I think
// it might be silly to ping the database everytime this gets updated is mainly 
// the reason. Not sure though...
model UserPreferences {
  id                     String @id @default(cuid())
  // Flag to indicate if the user wants to reduce some of the animations when using the build-in client
  // reduceAnimations   Boolean @default(false)
  // Whether the user wants to see the series in a library as a grid or list
  library_layout_mode    String @default("GRID")
  // Whether the user wants to see the media in a series as a grid or list
  series_layout_mode     String @default("GRID")
  // Whether the user wants to see the media in a collection as a grid or list
  collection_layout_mode String @default("GRID")
  // The locale the user has selected. E.g. 'en' or 'fr'. Default is 'en'
  locale                 String @default("en")

  // user User[]
  user User?

  @@map("user_preferences")
}

model ServerPreferences {
  id String @id @default(cuid())
  // // Flag indicating whether or not to attempt to rename scanned series according to a ComicInfo.xml file inside the directory.
  // // If none found, the series name will be the directory name.
  // rename_series    Boolean @default(false)
  // // Flag indicating whether or not to attempt to convert .cbr files to .cbz files on scan automatically.
  // convertCbrToCbz Boolean @default(false)

  @@map("server_preferences")
}
